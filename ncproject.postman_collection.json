{
	"info": {
		"_postman_id": "e941fd56-0471-490d-923a-96815e82e24b",
		"name": "ncproject",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "area",
			"item": [
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"OK response\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/area",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"area"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add bad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad response\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/area",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"area"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created response\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"    \r",
									"     var response = JSON.parse(pm.response.text());\r",
									"     pm.environment.set(\"area-id\", response.id);\r",
									"     console.log(response);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-area\",\r\n    \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/area",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"area"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"OK response\", function () {\r",
									"    pm.response.to.have.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    \r",
									"    var response = JSON.parse(pm.response.text());\r",
									"    pm.expect(response.id).to.eql(pm.environment.get(\"area-id\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/area/{{area-id}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"area",
								"{{area-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not found response\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/area/-1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"area",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"OK response\", function () {\r",
									"    pm.response.to.have.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"    \r",
									"     var response = JSON.parse(pm.response.text());\r",
									"     pm.expect(response.id).to.eql(pm.environment.get(\"area-id\"));\r",
									"     pm.expect(response.description).to.eql(\"updated description\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-area\",\r\n    \"description\": \"updated description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/area/{{area-id}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"area",
								"{{area-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not found response\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-area\",\r\n    \"description\": \"updated description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/area/-1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"area",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No content response\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/area/{{area-id}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"area",
								"{{area-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not found response\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/area/-1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"area",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add For Incident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created response\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"    \r",
									"     var response = JSON.parse(pm.response.text());\r",
									"     pm.environment.set(\"area-id\", response.id);\r",
									"     console.log(response);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-area\",\r\n    \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/area",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"area"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "status",
			"item": [
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"OK response\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/status",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add bad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad response\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/status",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created response\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"    \r",
									"     var response = JSON.parse(pm.response.text());\r",
									"     pm.environment.set(\"status-id\", response.id);\r",
									"     console.log(response);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-area\",\r\n    \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/status",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"OK response\", function () {\r",
									"    pm.response.to.have.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    \r",
									"    var response = JSON.parse(pm.response.text());\r",
									"    pm.expect(response.id).to.eql(pm.environment.get(\"status-id\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/status/{{status-id}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"status",
								"{{status-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not found response\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/status/-1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"status",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"OK response\", function () {\r",
									"    pm.response.to.have.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"    \r",
									"     var response = JSON.parse(pm.response.text());\r",
									"     pm.expect(response.id).to.eql(pm.environment.get(\"status-id\"));\r",
									"     pm.expect(response.description).to.eql(\"updated description\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-area\",\r\n    \"description\": \"updated description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/status/{{status-id}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"status",
								"{{status-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not found response\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-area\",\r\n    \"description\": \"updated description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/status/-1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"status",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No content response\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/status/{{status-id}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"status",
								"{{status-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not found response\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/status/-1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"status",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Successor For Incident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created response\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"    \r",
									"     var response = JSON.parse(pm.response.text());\r",
									"     pm.environment.set(\"status-successor-id\", response.id);\r",
									"     console.log(response);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-status-successor\",\r\n    \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/status",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add For Incident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created response\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"    \r",
									"     var response = JSON.parse(pm.response.text());\r",
									"     pm.environment.set(\"status-id\", response.id);\r",
									"     console.log(response);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-status\",\r\n    \"description\": \"description\",\r\n    \"successors\": [\"{{status-successor-id}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/status",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"OK response\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/user",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add bad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad response\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/user/signup",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created response\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"    \r",
									"     var response = JSON.parse(pm.response.text());\r",
									"     pm.environment.set(\"user-id\", response.id);\r",
									"     console.log(response);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman user\",\r\n    \"username\": \"postman-username\",\r\n    \"password\": \"postman-password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/user/signup",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"OK response\", function () {\r",
									"    pm.response.to.have.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    \r",
									"    var response = JSON.parse(pm.response.text());\r",
									"    pm.expect(response.id).to.eql(pm.environment.get(\"user-id\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/user/{{user-id}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not found response\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/user/-1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"OK response\", function () {\r",
									"    pm.response.to.have.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"    \r",
									"     var response = JSON.parse(pm.response.text());\r",
									"     pm.expect(response.id).to.eql(pm.environment.get(\"user-id\"));\r",
									"     pm.expect(response.name).to.eql(\"postman user updated\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman user updated\",\r\n    \"username\": \"postman-username\",\r\n    \"password\": \"postman-password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/user/{{user-id}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not found response\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman user updated\",\r\n    \"username\": \"postman-username\",\r\n    \"password\": \"postman-password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/user/-1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No content response\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/user/{{user-id}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not found response\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/user/-1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add For Incident",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created response\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"    \r",
									"     var response = JSON.parse(pm.response.text());\r",
									"     pm.environment.set(\"user-id\", response.id);\r",
									"     console.log(response);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman user\",\r\n    \"username\": \"postman-username\",\r\n    \"password\": \"postman-password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/user/signup",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"signup"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "incident",
			"item": [
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"OK response\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/incident",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"incident"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add bad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad response\", function () {\r",
									"     pm.response.to.be.badRequest;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/incident",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"incident"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created response\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"    \r",
									"     var response = JSON.parse(pm.response.text());\r",
									"     pm.environment.set(\"incident-id\", response.id);\r",
									"     console.log(response);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-area\",\r\n    \"description\": \"description\",\r\n    \"timeline\": {\r\n        \"start\": 1,\r\n        \"due\": 2\r\n    },\r\n    \"statusId\": \"{{status-id}}\",\r\n    \"areaId\": \"{{area-id}}\",\r\n    \"assigneeId\": \"{{user-id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/incident",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"incident"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"OK response\", function () {\r",
									"    pm.response.to.have.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    \r",
									"    var response = JSON.parse(pm.response.text());\r",
									"    pm.expect(response.id).to.eql(pm.environment.get(\"incident-id\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/incident/{{incident-id}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"incident",
								"{{incident-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not found response\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/incident/-1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"incident",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"OK response\", function () {\r",
									"    pm.response.to.have.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"JSON Body\", function () {\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"    \r",
									"     var response = JSON.parse(pm.response.text());\r",
									"     pm.expect(response.id).to.eql(pm.environment.get(\"incident-id\"));\r",
									"     pm.expect(response.description).to.eql(\"updated description\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-area\",\r\n    \"description\": \"updated description\",\r\n    \"timeline\": {\r\n        \"start\": 1,\r\n        \"due\": 2\r\n    },\r\n    \"statusId\": \"{{status-successor-id}}\",\r\n    \"areaId\": \"{{area-id}}\",\r\n    \"assigneeId\": \"{{user-id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/incident/{{incident-id}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"incident",
								"{{incident-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not found response\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-area\",\r\n    \"description\": \"description\",\r\n    \"timeline\": {\r\n        \"start\": 1,\r\n        \"due\": 2\r\n    },\r\n    \"statusId\": \"{{status-id}}\",\r\n    \"areaId\": \"{{area-id}}\",\r\n    \"assigneeId\": \"{{user-id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/incident/-1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"incident",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No content response\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/incident/{{incident-id}}",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"incident",
								"{{incident-id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}